			/*if (notes[place][1].val == 26) {
				randVal = rand.nextInt(4);
				while (attempts < 4 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][1].val == validNoteValues[1]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[1] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[1];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[1] == 1 || notes[place - 1][0].val - validNoteValues[1] == 2 ||
								   notes[place - 1][0].val - validNoteValues[1] == -2 || notes[place - 1][0].val - validNoteValues[1] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[1]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[1] == 3 || notes[place - 1][0].val - validNoteValues[1] == 4 ||
								   notes[place - 1][0].val - validNoteValues[1] == -3 || notes[place - 1][0].val - validNoteValues[1] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[1] == 5 || notes[place - 1][0].val - validNoteValues[1] == 7 ||
								   notes[place - 1][0].val - validNoteValues[1] == 8 || notes[place - 1][0].val - validNoteValues[1] == 12 ||
								   notes[place - 1][0].val - validNoteValues[1] == -5 || notes[place - 1][0].val - validNoteValues[1] == -7 ||
								   notes[place - 1][0].val - validNoteValues[1] == -8 || notes[place - 1][0].val - validNoteValues[1] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][0].val == validNoteValues[3]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[3] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[3];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[3] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[3] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[3] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[3]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 2) {
						if (notes[place - 1][1].val == validNoteValues[5]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[5] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[5];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[5] == 1 || notes[place - 1][0].val - validNoteValues[5] == 2 ||
								   notes[place - 1][0].val - validNoteValues[5] == -2 || notes[place - 1][0].val - validNoteValues[5] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[5]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[5] == 3 || notes[place - 1][0].val - validNoteValues[5] == 4 ||
								   notes[place - 1][0].val - validNoteValues[5] == -3 || notes[place - 1][0].val - validNoteValues[5] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[5] == 5 || notes[place - 1][0].val - validNoteValues[5] == 7 ||
								   notes[place - 1][0].val - validNoteValues[5] == 8 || notes[place - 1][0].val - validNoteValues[5] == 12 ||
								   notes[place - 1][0].val - validNoteValues[5] == -5 || notes[place - 1][0].val - validNoteValues[5] == -7 ||
								   notes[place - 1][0].val - validNoteValues[5] == -8 || notes[place - 1][0].val - validNoteValues[5] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][0].val == validNoteValues[7]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[7] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[7];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[7] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[7] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[7] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[7]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 5;
					++attempts;
				}
			} else if (notes[place][1].val == 28) {
				randVal = rand.nextInt(4);
				while (attempts < 4 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][0].val == validNoteValues[1]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[1] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[1];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[1] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[1] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[1] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[1] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[1]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[1] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[1] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][1].val == validNoteValues[2]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[2] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[2];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[2] == 1 || notes[place - 1][0].val - validNoteValues[2] == 2 ||
								   notes[place - 1][0].val - validNoteValues[2] == -2 || notes[place - 1][0].val - validNoteValues[2] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[2]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[2] == 3 || notes[place - 1][0].val - validNoteValues[2] == 4 ||
								   notes[place - 1][0].val - validNoteValues[2] == -3 || notes[place - 1][0].val - validNoteValues[2] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[2] == 5 || notes[place - 1][0].val - validNoteValues[2] == 7 ||
								   notes[place - 1][0].val - validNoteValues[2] == 8 || notes[place - 1][0].val - validNoteValues[2] == 12 ||
								   notes[place - 1][0].val - validNoteValues[2] == -5 || notes[place - 1][0].val - validNoteValues[2] == -7 ||
								   notes[place - 1][0].val - validNoteValues[2] == -8 || notes[place - 1][0].val - validNoteValues[2] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 2) {
						if (notes[place - 1][0].val == validNoteValues[4]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[4] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[4];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[4] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[4] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[4] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[4] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[4]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[4] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[4] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][1].val == validNoteValues[6]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[6] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[6];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[6] == 1 || notes[place - 1][0].val - validNoteValues[6] == 2 ||
								   notes[place - 1][0].val - validNoteValues[6] == -2 || notes[place - 1][0].val - validNoteValues[6] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[6]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[6] == 3 || notes[place - 1][0].val - validNoteValues[6] == 4 ||
								   notes[place - 1][0].val - validNoteValues[6] == -3 || notes[place - 1][0].val - validNoteValues[6] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[6] == 5 || notes[place - 1][0].val - validNoteValues[6] == 7 ||
								   notes[place - 1][0].val - validNoteValues[6] == 8 || notes[place - 1][0].val - validNoteValues[6] == 12 ||
								   notes[place - 1][0].val - validNoteValues[6] == -5 || notes[place - 1][0].val - validNoteValues[6] == -7 ||
								   notes[place - 1][0].val - validNoteValues[6] == -8 || notes[place - 1][0].val - validNoteValues[6] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 4;
					++attempts;
				}
			} else if (notes[place][1].val == 29) {
				randVal = rand.nextInt(5);
				while (attempts < 5 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][1].val == validNoteValues[0]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[0] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[0]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[0];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[0] == 1 || notes[place - 1][0].val - validNoteValues[1] == 2 ||
								   notes[place - 1][0].val - validNoteValues[0] == -2 || notes[place - 1][0].val - validNoteValues[1] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[0]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[0] == 3 || notes[place - 1][0].val - validNoteValues[0] == 4 ||
								   notes[place - 1][0].val - validNoteValues[0] == -3 || notes[place - 1][0].val - validNoteValues[0] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[0]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[0] == 5 || notes[place - 1][0].val - validNoteValues[0] == 7 ||
								   notes[place - 1][0].val - validNoteValues[0] == 8 || notes[place - 1][0].val - validNoteValues[0] == 12 ||
								   notes[place - 1][0].val - validNoteValues[0] == -5 || notes[place - 1][0].val - validNoteValues[0] == -7 ||
								   notes[place - 1][0].val - validNoteValues[0] == -8 || notes[place - 1][0].val - validNoteValues[0] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[0]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][0].val == validNoteValues[2]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[2] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[2];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[2] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[2] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[2] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[2] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[2]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[2] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[2] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 2) {
						if (notes[place - 1][1].val == validNoteValues[3]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[3] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[1];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[3] == 1 || notes[place - 1][0].val - validNoteValues[3] == 2 ||
								   notes[place - 1][0].val - validNoteValues[3] == -2 || notes[place - 1][0].val - validNoteValues[3] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[3]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[3] == 3 || notes[place - 1][0].val - validNoteValues[3] == 4 ||
								   notes[place - 1][0].val - validNoteValues[3] == -3 || notes[place - 1][0].val - validNoteValues[3] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[3] == 5 || notes[place - 1][0].val - validNoteValues[3] == 7 ||
								   notes[place - 1][0].val - validNoteValues[3] == 8 || notes[place - 1][0].val - validNoteValues[3] == 12 ||
								   notes[place - 1][0].val - validNoteValues[3] == -5 || notes[place - 1][0].val - validNoteValues[3] == -7 ||
								   notes[place - 1][0].val - validNoteValues[3] == -8 || notes[place - 1][0].val - validNoteValues[3] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 3) {
						if (notes[place - 1][0].val == validNoteValues[5]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[5] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[5];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[5] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[5] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[5] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[5] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[5]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[5] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[5] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[5] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[5] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[5] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[5] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[5] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[5] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[5] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[5] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[5] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[5] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][1].val == validNoteValues[7]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[7] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[7];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[7] == 1 || notes[place - 1][0].val - validNoteValues[7] == 2 ||
								   notes[place - 1][0].val - validNoteValues[7] == -2 || notes[place - 1][0].val - validNoteValues[7] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[7]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[7] == 3 || notes[place - 1][0].val - validNoteValues[7] == 4 ||
								   notes[place - 1][0].val - validNoteValues[7] == -3 || notes[place - 1][0].val - validNoteValues[7] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[7] == 5 || notes[place - 1][0].val - validNoteValues[7] == 7 ||
								   notes[place - 1][0].val - validNoteValues[7] == 8 || notes[place - 1][0].val - validNoteValues[7] == 12 ||
								   notes[place - 1][0].val - validNoteValues[7] == -5 || notes[place - 1][0].val - validNoteValues[7] == -7 ||
								   notes[place - 1][0].val - validNoteValues[7] == -8 || notes[place - 1][0].val - validNoteValues[7] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 5;
					++attempts;
				}
			} else if (notes[place][1].val == 31) {
				randVal = rand.nextInt(4);
				while (attempts < 4 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][1].val == validNoteValues[1]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[1] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[1];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[1] == 1 || notes[place - 1][0].val - validNoteValues[1] == 2 ||
								   notes[place - 1][0].val - validNoteValues[1] == -2 || notes[place - 1][0].val - validNoteValues[1] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[1]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[1] == 3 || notes[place - 1][0].val - validNoteValues[1] == 4 ||
								   notes[place - 1][0].val - validNoteValues[1] == -3 || notes[place - 1][0].val - validNoteValues[1] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[1] == 5 || notes[place - 1][0].val - validNoteValues[1] == 7 ||
								   notes[place - 1][0].val - validNoteValues[1] == 8 || notes[place - 1][0].val - validNoteValues[1] == 12 ||
								   notes[place - 1][0].val - validNoteValues[1] == -5 || notes[place - 1][0].val - validNoteValues[1] == -7 ||
								   notes[place - 1][0].val - validNoteValues[1] == -8 || notes[place - 1][0].val - validNoteValues[1] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][0].val == validNoteValues[3]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[3] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[3];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[3] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[3] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[3] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[3]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 2) {
						if (notes[place - 1][1].val == validNoteValues[4]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[4] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[4];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[4] == 1 || notes[place - 1][0].val - validNoteValues[4] == 2 ||
								   notes[place - 1][0].val - validNoteValues[4] == -2 || notes[place - 1][0].val - validNoteValues[4] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[4]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[4] == 3 || notes[place - 1][0].val - validNoteValues[4] == 4 ||
								   notes[place - 1][0].val - validNoteValues[4] == -3 || notes[place - 1][0].val - validNoteValues[4] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[4] == 5 || notes[place - 1][0].val - validNoteValues[4] == 7 ||
								   notes[place - 1][0].val - validNoteValues[4] == 8 || notes[place - 1][0].val - validNoteValues[4] == 12 ||
								   notes[place - 1][0].val - validNoteValues[4] == -5 || notes[place - 1][0].val - validNoteValues[4] == -7 ||
								   notes[place - 1][0].val - validNoteValues[4] == -8 || notes[place - 1][0].val - validNoteValues[4] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][0].val == validNoteValues[6]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[6] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[6];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[6] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[6] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[6] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[6] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[6]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[6] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[6] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 4;
					++attempts;
				}
			} else if (notes[place][1].val == 33) {
				randVal = rand.nextInt(5);
				while (attempts < 5 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][0].val == validNoteValues[0]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[0] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[0]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[0];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[0] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[0] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[0] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[0] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[0]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[0] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[0] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[0] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[0] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[0]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[0] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[0] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[0] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[0] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[0] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[0] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[0] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[0] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[0]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][1].val == validNoteValues[2]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[2] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[2];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[2] == 1 || notes[place - 1][0].val - validNoteValues[2] == 2 ||
								   notes[place - 1][0].val - validNoteValues[2] == -2 || notes[place - 1][0].val - validNoteValues[2] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[2]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[2] == 3 || notes[place - 1][0].val - validNoteValues[2] == 4 ||
								   notes[place - 1][0].val - validNoteValues[2] == -3 || notes[place - 1][0].val - validNoteValues[2] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[2] == 5 || notes[place - 1][0].val - validNoteValues[2] == 7 ||
								   notes[place - 1][0].val - validNoteValues[2] == 8 || notes[place - 1][0].val - validNoteValues[2] == 12 ||
								   notes[place - 1][0].val - validNoteValues[2] == -5 || notes[place - 1][0].val - validNoteValues[2] == -7 ||
								   notes[place - 1][0].val - validNoteValues[2] == -8 || notes[place - 1][0].val - validNoteValues[2] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 2) {
						if (notes[place - 1][0].val == validNoteValues[4]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[4] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[4];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[4] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[4] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[4] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[4] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[4]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[4] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[4] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[4] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[4] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 3) {
						if (notes[place - 1][1].val == validNoteValues[5]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[5] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[5];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[5] == 1 || notes[place - 1][0].val - validNoteValues[5] == 2 ||
								   notes[place - 1][0].val - validNoteValues[5] == -2 || notes[place - 1][0].val - validNoteValues[5] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[5]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[5] == 3 || notes[place - 1][0].val - validNoteValues[5] == 4 ||
								   notes[place - 1][0].val - validNoteValues[5] == -3 || notes[place - 1][0].val - validNoteValues[5] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[5] == 5 || notes[place - 1][0].val - validNoteValues[5] == 7 ||
								   notes[place - 1][0].val - validNoteValues[5] == 8 || notes[place - 1][0].val - validNoteValues[5] == 12 ||
								   notes[place - 1][0].val - validNoteValues[5] == -5 || notes[place - 1][0].val - validNoteValues[5] == -7 ||
								   notes[place - 1][0].val - validNoteValues[5] == -8 || notes[place - 1][0].val - validNoteValues[5] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][0].val == validNoteValues[7]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[7] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[7];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[7] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[7] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[7] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[7]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 5;
					++attempts;
				}
			} else if (notes[place][1].val == 35) {
				randVal = rand.nextInt(3);
				while (attempts < 3 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][0].val == validNoteValues[1]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[1] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[1];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[1] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[1] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[1] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[1] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[1]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[1] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[1] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[1] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[1] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[1]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][1].val == validNoteValues[3]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[3] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[1];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[3] == 1 || notes[place - 1][0].val - validNoteValues[3] == 2 ||
								   notes[place - 1][0].val - validNoteValues[3] == -2 || notes[place - 1][0].val - validNoteValues[3] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[3]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[3] == 3 || notes[place - 1][0].val - validNoteValues[3] == 4 ||
								   notes[place - 1][0].val - validNoteValues[3] == -3 || notes[place - 1][0].val - validNoteValues[3] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[3] == 5 || notes[place - 1][0].val - validNoteValues[3] == 7 ||
								   notes[place - 1][0].val - validNoteValues[3] == 8 || notes[place - 1][0].val - validNoteValues[3] == 12 ||
								   notes[place - 1][0].val - validNoteValues[3] == -5 || notes[place - 1][0].val - validNoteValues[3] == -7 ||
								   notes[place - 1][0].val - validNoteValues[3] == -8 || notes[place - 1][0].val - validNoteValues[3] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][1].val == validNoteValues[6]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[6] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[6];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[6] == 1 || notes[place - 1][0].val - validNoteValues[6] == 2 ||
								   notes[place - 1][0].val - validNoteValues[6] == -2 || notes[place - 1][0].val - validNoteValues[6] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[6]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[6] == 3 || notes[place - 1][0].val - validNoteValues[6] == 4 ||
								   notes[place - 1][0].val - validNoteValues[6] == -3 || notes[place - 1][0].val - validNoteValues[6] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[6] == 5 || notes[place - 1][0].val - validNoteValues[6] == 7 ||
								   notes[place - 1][0].val - validNoteValues[6] == 8 || notes[place - 1][0].val - validNoteValues[6] == 12 ||
								   notes[place - 1][0].val - validNoteValues[6] == -5 || notes[place - 1][0].val - validNoteValues[6] == -7 ||
								   notes[place - 1][0].val - validNoteValues[6] == -8 || notes[place - 1][0].val - validNoteValues[6] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 3;
					++attempts;
				}
			} else if (notes[place][1].val == 36) {
				randVal = rand.nextInt(4);
				while (attempts < 4 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][0].val == validNoteValues[2]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[2] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[2];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[2] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[2] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[2] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[2] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[2]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[2] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[2] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[2] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[2] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[2]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][1].val == validNoteValues[4]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[4] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[4];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[4] == 1 || notes[place - 1][0].val - validNoteValues[4] == 2 ||
								   notes[place - 1][0].val - validNoteValues[4] == -2 || notes[place - 1][0].val - validNoteValues[4] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[4]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[4] == 3 || notes[place - 1][0].val - validNoteValues[4] == 4 ||
								   notes[place - 1][0].val - validNoteValues[4] == -3 || notes[place - 1][0].val - validNoteValues[4] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[4] == 5 || notes[place - 1][0].val - validNoteValues[4] == 7 ||
								   notes[place - 1][0].val - validNoteValues[4] == 8 || notes[place - 1][0].val - validNoteValues[4] == 12 ||
								   notes[place - 1][0].val - validNoteValues[4] == -5 || notes[place - 1][0].val - validNoteValues[4] == -7 ||
								   notes[place - 1][0].val - validNoteValues[4] == -8 || notes[place - 1][0].val - validNoteValues[4] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[4]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 2) {
						if (notes[place - 1][0].val == validNoteValues[6]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[6] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[6];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[6] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[6] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[6] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[6] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[6]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[6] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[6] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[6] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[6] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[6]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][1].val == validNoteValues[7]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[7] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[7];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[7] == 1 || notes[place - 1][0].val - validNoteValues[7] == 2 ||
								   notes[place - 1][0].val - validNoteValues[7] == -2 || notes[place - 1][0].val - validNoteValues[7] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[7]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[7] == 3 || notes[place - 1][0].val - validNoteValues[7] == 4 ||
								   notes[place - 1][0].val - validNoteValues[7] == -3 || notes[place - 1][0].val - validNoteValues[7] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[7] == 5 || notes[place - 1][0].val - validNoteValues[7] == 7 ||
								   notes[place - 1][0].val - validNoteValues[7] == 8 || notes[place - 1][0].val - validNoteValues[7] == 12 ||
								   notes[place - 1][0].val - validNoteValues[7] == -5 || notes[place - 1][0].val - validNoteValues[7] == -7 ||
								   notes[place - 1][0].val - validNoteValues[7] == -8 || notes[place - 1][0].val - validNoteValues[7] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 4;
					++attempts;
				}
			} else {
				randVal = rand.nextInt(3);
				while (attempts < 3 && !noteFound) {
					if (randVal == 0) {
						if (notes[place - 1][0].val == validNoteValues[3]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[3] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[3];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[3] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[3] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[3] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[3]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[3] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[3] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[3] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[3]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else if (randVal == 1) {
						if (notes[place - 1][1].val == validNoteValues[5]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[5] && !nextMotionStepwise && notes[place - 1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[5];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[5] == 1 || notes[place - 1][0].val - validNoteValues[5] == 2 ||
								   notes[place - 1][0].val - validNoteValues[5] == -2 || notes[place - 1][0].val - validNoteValues[5] == -1) {
							//if the motion is stepwise
							notes[place++][0] = new Note(validNoteValues[5]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if (notes[place - 1][0].val - validNoteValues[5] == 3 || notes[place - 1][0].val - validNoteValues[5] == 4 ||
								   notes[place - 1][0].val - validNoteValues[5] == -3 || notes[place - 1][0].val - validNoteValues[5] == -4) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if (notes[place - 1][0].val - validNoteValues[5] == 5 || notes[place - 1][0].val - validNoteValues[5] == 7 ||
								   notes[place - 1][0].val - validNoteValues[5] == 8 || notes[place - 1][0].val - validNoteValues[5] == 12 ||
								   notes[place - 1][0].val - validNoteValues[5] == -5 || notes[place - 1][0].val - validNoteValues[5] == -7 ||
								   notes[place - 1][0].val - validNoteValues[5] == -8 || notes[place - 1][0].val - validNoteValues[5] == -12) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[5]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					} else {
						if (notes[place - 1][0].val == validNoteValues[7]) {
							//if it's the same note
							if (numberOfNoteRepetitions != 2 && valueOfRepeatedNote != validNoteValues[7] && !nextMotionStepwise && notes[place-1][1].val != notes[place][1].val) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips = 0;
								numberOfNoteRepetitions++;
								valueOfRepeatedNote = validNoteValues[7];
								previousMotionStepwise = true;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 1 && notes[place-1][1].val - notes[place][1].val < 0) || 
							(notes[place - 1][0].val - validNoteValues[7] == 2 && notes[place-1][1].val - notes[place][1].val < 0) ||
							(notes[place - 1][0].val - validNoteValues[7] == -2 && notes[place-1][1].val - notes[place][1].val > 0) || 
							(notes[place - 1][0].val - validNoteValues[7] == -1 && notes[place-1][1].val - notes[place][1].val > 0)) {
							//if the motion is stepwise and contrary
							notes[place++][0] = new Note(validNoteValues[7]);
							numberOfSkips = 0;
							numberOfNoteRepetitions = 0;
							previousMotionStepwise = true;
							nextMotionStepwise = false;
							noteFound = true;
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 3 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 4 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -3 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -4 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (numberOfSkips != 2 && !nextMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								noteFound = true;
							}
						} else if ((notes[place - 1][0].val - validNoteValues[7] == 5 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 8 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == 7 && notes[place-1][1].val - notes[place][1].val < 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == 12 && notes[place-1][1].val - notes[place][1].val < 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -5 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -8 && notes[place-1][1].val - notes[place][1].val > 0) ||
								   (notes[place - 1][0].val - validNoteValues[7] == -7 && notes[place-1][1].val - notes[place][1].val > 0) || 
								   (notes[place - 1][0].val - validNoteValues[7] == -12 && notes[place-1][1].val - notes[place][1].val > 0)) {
							if (previousMotionStepwise) {
								notes[place++][0] = new Note(validNoteValues[7]);
								numberOfSkips++;
								numberOfNoteRepetitions = 0;
								previousMotionStepwise = false;
								nextMotionStepwise = true;
								noteFound = true;
							}
						}
					}
					randVal = (randVal + 1) % 3;
					++attempts;
				}
			}*/